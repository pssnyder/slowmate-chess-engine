{
  "features": {
    "metadata": {
      "version": "v0.3.03_NAGASAKI",
      "enumeration_date": "2025-07-23T01:13:56.007848",
      "purpose": "Complete feature inventory for systematic v0.4.x rebuild",
      "baseline_target": "v0.1.0_BETA (last known stable/tournament-winning version)"
    },
    "core_engine_architecture": {
      "purpose": "Fundamental chess engine structure and UCI compliance",
      "features": {
        "uci_interface": {
          "what": "Universal Chess Interface protocol compliance",
          "why": "Enable integration with Arena, ChessBase, and other GUIs",
          "priority": "CRITICAL - Must work in all rebuild phases"
        },
        "move_generation": {
          "what": "Legal move generation using python-chess library",
          "why": "Generate all possible moves in any position",
          "priority": "CRITICAL - Core functionality"
        },
        "position_representation": {
          "what": "Chess position state management",
          "why": "Track board state, turn, castling rights, en passant",
          "priority": "CRITICAL - Core functionality"
        },
        "engine_identity": {
          "what": "Engine name, version, and identification",
          "why": "Proper identification in tournaments and GUIs",
          "priority": "HIGH - Tournament requirement"
        }
      }
    },
    "move_selection_intelligence": {
      "purpose": "Choose the best move from available legal moves",
      "features": {
        "checkmate_detection": {
          "what": "Identify and prioritize checkmate-in-one moves",
          "why": "Win games immediately when mate is available",
          "priority": "CRITICAL - Game-winning feature"
        },
        "stalemate_avoidance": {
          "what": "Avoid moves that cause stalemate when winning",
          "why": "Don't throw away winning positions",
          "priority": "HIGH - Prevents game losses"
        },
        "draw_avoidance": {
          "what": "Avoid moves that cause draws (insufficient material, 50-move rule)",
          "why": "Don't accept draws in favorable positions",
          "priority": "MEDIUM - Position dependent"
        },
        "basic_evaluation": {
          "what": "Score positions to compare move quality",
          "why": "Choose better moves over worse ones",
          "priority": "CRITICAL - Core intelligence"
        }
      }
    },
    "position_evaluation_system": {
      "purpose": "Assess how good/bad a chess position is",
      "features": {
        "material_counting": {
          "what": "Calculate total piece values (Q=9, R=5, B=3, N=3, P=1)",
          "why": "Material advantage often leads to winning positions",
          "priority": "CRITICAL - Fundamental evaluation"
        },
        "piece_square_tables": {
          "what": "Positional bonuses based on piece placement",
          "why": "Encourage good piece development and positioning",
          "priority": "HIGH - Improves positional play"
        },
        "game_phase_detection": {
          "what": "Identify opening, middlegame, endgame phases",
          "why": "Different strategies work better in different phases",
          "priority": "MEDIUM - Strategic enhancement"
        },
        "king_safety_evaluation": {
          "what": "Assess king safety (castling, pawn shield, attacks)",
          "why": "King safety is crucial for survival",
          "priority": "HIGH - Prevents tactical disasters"
        }
      }
    },
    "tactical_intelligence": {
      "purpose": "Recognize and exploit tactical patterns",
      "features": {
        "capture_evaluation": {
          "what": "Evaluate piece captures (including x-ray attacks)",
          "why": "Winning material through tactics is fundamental",
          "priority": "HIGH - Tactical strength"
        },
        "threat_detection": {
          "what": "Identify pieces under attack or threatening opponent",
          "why": "Defend your pieces and attack opponent pieces",
          "priority": "HIGH - Tactical awareness"
        },
        "pin_recognition": {
          "what": "Detect pinned pieces and pin opportunities",
          "why": "Pins are powerful tactical motifs",
          "priority": "MEDIUM - Advanced tactics"
        },
        "fork_detection": {
          "what": "Identify fork opportunities (attacking multiple pieces)",
          "why": "Forks win material or create tactical advantages",
          "priority": "MEDIUM - Advanced tactics"
        },
        "discovered_attacks": {
          "what": "Recognize discovered attack patterns",
          "why": "Discovered attacks are powerful tactical weapons",
          "priority": "MEDIUM - Advanced tactics"
        }
      }
    },
    "search_and_depth": {
      "purpose": "Look ahead multiple moves to find better continuations",
      "features": {
        "depth_search": {
          "what": "Search multiple moves deep in critical positions",
          "why": "See further ahead to find better moves and avoid traps",
          "priority": "HIGH - Significant strength improvement"
        },
        "mate_search": {
          "what": "Deep search for checkmate sequences",
          "why": "Find forced mate sequences when they exist",
          "priority": "HIGH - Game-winning feature"
        },
        "critical_position_recognition": {
          "what": "Identify when deeper search is needed",
          "why": "Allocate computation time to important decisions",
          "priority": "MEDIUM - Efficiency enhancement"
        }
      }
    },
    "knowledge_systems": {
      "purpose": "Apply chess knowledge for better play",
      "features": {
        "opening_principles": {
          "what": "Basic opening development principles",
          "why": "Get pieces developed and king safe in opening",
          "priority": "MEDIUM - Positional improvement"
        },
        "endgame_knowledge": {
          "what": "Basic endgame evaluation and patterns",
          "why": "Convert advantages into wins in endgames",
          "priority": "MEDIUM - Endgame strength"
        },
        "pawn_structure": {
          "what": "Evaluate pawn chains, weaknesses, passed pawns",
          "why": "Pawns form the skeleton of position",
          "priority": "LOW - Positional refinement"
        }
      }
    },
    "debugging_and_development": {
      "purpose": "Support development, testing, and troubleshooting",
      "features": {
        "debug_toggles": {
          "what": "Enable/disable individual features for testing",
          "why": "Isolate problems and test feature interactions",
          "priority": "CRITICAL - Development necessity"
        },
        "uci_options": {
          "what": "Expose engine settings through UCI protocol",
          "why": "Allow users to configure engine behavior",
          "priority": "HIGH - User control and debugging"
        },
        "evaluation_logging": {
          "what": "Detailed logging of evaluation components",
          "why": "Understand why engine makes certain moves",
          "priority": "MEDIUM - Development aid"
        },
        "performance_monitoring": {
          "what": "Track evaluation speed and search statistics",
          "why": "Optimize engine performance",
          "priority": "LOW - Optimization aid"
        }
      }
    },
    "build_and_deployment": {
      "purpose": "Package engine for distribution and tournament play",
      "features": {
        "executable_creation": {
          "what": "PyInstaller-based executable generation",
          "why": "Create standalone executables for tournament use",
          "priority": "CRITICAL - Deployment requirement"
        },
        "version_management": {
          "what": "Consistent versioning and build configuration",
          "why": "Track changes and manage releases",
          "priority": "HIGH - Project management"
        },
        "tournament_packaging": {
          "what": "Create tournament-ready folders with engine and docs",
          "why": "Easy deployment to tournament environments",
          "priority": "MEDIUM - Convenience feature"
        }
      }
    }
  },
  "problems": {
    "evaluation_system": {
      "problem": "Massive evaluation scores (+M500/8, -2500cp) in normal positions",
      "impact": "Makes engine look broken, affects UCI output, confuses GUIs",
      "root_cause": "Multiple evaluation paths, improper scaling, mate calculation bugs"
    },
    "uci_compliance": {
      "problem": "Debug options not visible in Arena, inconsistent UCI output",
      "impact": "Can't debug in real tournament conditions, looks unprofessional",
      "root_cause": "UCI option registration issues, build process problems"
    },
    "performance_regression": {
      "problem": "v0.3.x loses to v0.1.0 in tournaments",
      "impact": "Engine got worse instead of better",
      "root_cause": "Feature additions introduced bugs, evaluation interference"
    },
    "mate_detection": {
      "problem": "False mate scores in early game positions",
      "impact": "Engine appears to miscalculate fundamental chess concepts",
      "root_cause": "Mate search depth issues, evaluation pipeline problems"
    },
    "build_consistency": {
      "problem": "Fixes work in testing but not in built executables",
      "impact": "Can't deploy fixes to actual tournament use",
      "root_cause": "Build process doesn't reflect source code changes"
    }
  },
  "restoration_strategy": {
    "phase_1_stabilization": {
      "goal": "Create working baseline from v0.1.0",
      "actions": [
        "Restore v0.1.0_BETA source code",
        "Verify it builds and runs correctly",
        "Confirm tournament-winning performance",
        "Document exact feature set"
      ]
    },
    "phase_2_incremental_restoration": {
      "goal": "Add features one at a time with validation",
      "approach": "Add feature -> Build -> Test -> Tournament validate -> Keep or revert",
      "feature_order": [
        "UCI options and debug toggles",
        "Improved evaluation scaling",
        "Enhanced material evaluation",
        "King safety improvements",
        "Basic tactical awareness",
        "Depth search (if beneficial)",
        "Advanced tactics (if beneficial)",
        "Endgame knowledge (if beneficial)"
      ]
    },
    "phase_3_validation": {
      "goal": "Ensure each addition improves performance",
      "criteria": [
        "Beats previous version in head-to-head",
        "Evaluation scores stay reasonable (-10.00 to +10.00 typical)",
        "UCI output is clean and professional",
        "No regression in tournament performance"
      ]
    },
    "phase_4_deployment": {
      "goal": "Create v0.5.0_BETA as stable, enhanced version",
      "requirements": [
        "Consistently beats v0.1.0 baseline",
        "Clean UCI interface with working options",
        "Reasonable evaluation scores",
        "Tournament-ready reliability"
      ]
    }
  }
}